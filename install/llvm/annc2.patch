diff --git a/third_party/tsl/third_party/llvm/annc2.patch b/third_party/tsl/third_party/llvm/annc2.patch
new file mode 100644
index 0000000..0cb2a54
--- /dev/null
+++ b/third_party/tsl/third_party/llvm/annc2.patch
@@ -0,0 +1,95 @@
+diff --git a/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.h b/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.h
+index 48f9066934a2..d2dd95416241 100644
+--- a/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.h
++++ b/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.h
+@@ -24,6 +24,9 @@ std::unique_ptr<Pass> createFoldTensorSubsetOpsPass();
+ /// Creates an instance of the `tensor` dialect bufferization pass.
+ std::unique_ptr<Pass> createTensorBufferizePass();
+ 
++/// Creates an instance of the concat decomposition pass.
++std::unique_ptr<Pass> createDecomposeTensorConcatPass();
++
+ //===----------------------------------------------------------------------===//
+ // Registration
+ //===----------------------------------------------------------------------===//
+diff --git a/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.td b/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.td
+index 4cc3844f2912..d30e5fcb604d 100644
+--- a/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.td
++++ b/mlir/include/mlir/Dialect/Tensor/Transforms/Passes.td
+@@ -32,4 +32,15 @@ def TensorBufferize : Pass<"tensor-bufferize", "func::FuncOp"> {
+   let constructor = "mlir::tensor::createTensorBufferizePass()";
+ }
+ 
++def DecomposeTensorConcat : Pass<"decompose-tensor-concat"> {
++  let summary = "Decompose tensor.concat into a chain of tensor.insert_slice "
++                "ops";
++  let description = [{
++    The pass decomposes tensor.concat ops into a chain of tensor.insert_slice
++    operations inserting into a materialized destination.
++  }];
++  let constructor = "mlir::tensor::createDecomposeTensorConcatPass()";
++  let dependentDialects = ["tensor::TensorDialect"];
++}
++
+ #endif // MLIR_DIALECT_TENSOR_TRANSFORMS_PASSES
+diff --git a/mlir/lib/Dialect/Tensor/Transforms/ConcatOpPatterns.cpp b/mlir/lib/Dialect/Tensor/Transforms/ConcatOpPatterns.cpp
+index 2108fc591055..a9b08fce84e1 100644
+--- a/mlir/lib/Dialect/Tensor/Transforms/ConcatOpPatterns.cpp
++++ b/mlir/lib/Dialect/Tensor/Transforms/ConcatOpPatterns.cpp
+@@ -10,8 +10,17 @@
+ #include "mlir/Dialect/Arith/IR/Arith.h"
+ #include "mlir/Dialect/Arith/Utils/Utils.h"
+ #include "mlir/Dialect/Tensor/IR/Tensor.h"
++#include "mlir/Dialect/Tensor/Transforms/Passes.h"
+ #include "mlir/Dialect/Tensor/Transforms/Transforms.h"
+ #include "mlir/IR/PatternMatch.h"
++#include "mlir/Transforms/GreedyPatternRewriteDriver.h"
++
++namespace mlir {
++namespace tensor {
++#define GEN_PASS_DEF_DECOMPOSETENSORCONCAT
++#include "mlir/Dialect/Tensor/Transforms/Passes.h.inc"
++} // namespace tensor
++} // namespace mlir
+ 
+ using namespace mlir;
+ using namespace mlir::tensor;
+@@ -91,3 +100,27 @@ void mlir::tensor::populateDecomposeTensorConcatPatterns(
+     RewritePatternSet &patterns) {
+   patterns.add<DecomposeTensorConcatOp>(patterns.getContext());
+ }
++
++//===----------------------------------------------------------------------===//
++// Pass registration
++//===----------------------------------------------------------------------===//
++
++namespace {
++
++struct DecomposeTensorConcatPass final
++    : public tensor::impl::DecomposeTensorConcatBase<
++          DecomposeTensorConcatPass> {
++  void runOnOperation() override;
++};
++
++} // namespace
++
++void DecomposeTensorConcatPass::runOnOperation() {
++  RewritePatternSet patterns(&getContext());
++  tensor::populateDecomposeTensorConcatPatterns(patterns);
++  (void)applyPatternsAndFoldGreedily(getOperation(), std::move(patterns));
++}
++
++std::unique_ptr<Pass> tensor::createDecomposeTensorConcatPass() {
++  return std::make_unique<DecomposeTensorConcatPass>();
++}
+\ No newline at end of file
+diff --git a/mlir/test/Dialect/Tensor/decompose-concat.mlir b/mlir/test/Dialect/Tensor/decompose-concat.mlir
+index 5712c77a743d..56f874e68b9c 100644
+--- a/mlir/test/Dialect/Tensor/decompose-concat.mlir
++++ b/mlir/test/Dialect/Tensor/decompose-concat.mlir
+@@ -1,4 +1,5 @@
+ // RUN: mlir-opt -split-input-file -transform-interpreter -cse  %s | FileCheck %s
++// RUN: mlir-opt --decompose-tensor-concat -cse %s | FileCheck %s
+ 
+ module attributes {transform.with_named_sequence} {
+   transform.named_sequence @__transform_main(%func_op: !transform.op<"func.func"> {transform.readonly}) {
